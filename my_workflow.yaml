main:
  params: [args]
  steps:
  - init:
      assign:
      - projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - projectNumber: ${sys.get_env("GOOGLE_CLOUD_PROJECT_NUMBER")}
      - zone: "europe-west1-b"
      - machineType: "e2-medium"
      - instanceName: ${args.instanceName}
      - workSeconds: ${args.workSeconds}
      - imageName: ${args.imageName}
  - print_params:
      for:
        value: param
        in: ${keys(args)}
        steps:
        - print_literal:
            call: sys.log
            args:
              data: ${"key->  "+ param+"\nvalue-> "+ args[param]}
          
  - create_and_start_vm:
      call: googleapis.compute.v1.instances.insert
      args:
        project: ${projectId}
        zone: ${zone}
        body:
          tags:
            items:
            - http-server
          name: ${instanceName}
          machineType: ${"zones/" + zone + "/machineTypes/" + machineType}
          disks:
          - autoDelete: true
            boot: true
            deviceName: ${instanceName}
            initializeParams:
              diskSizeGb: '10'
              diskType: "projects/simstagra/zones/europe-west1-c/diskTypes/pd-balanced"
              labels: {}
              sourceImage: "projects/cos-cloud/global/images/cos-stable-97-16919-103-33"
            mode: READ_WRITE
            type: PERSISTENT
          # Needed to make sure the VM has an external IP
          networkInterfaces:
          - accessConfigs:
            - name: "External NAT"
              networkTier: "PREMIUM"
          # The container to run
          metadata:
              items:
              - key: "gce-container-declaration"
                value: '${"spec:\n  containers:\n  - name: "+instanceName +"\n    image: gcr.io/" + projectId +"/" + imageName+"\n    stdin: false\n    tty: false\n  restartPolicy: Always\n"}'
          # Needed to be able to pull down and run the container
          serviceAccounts:
          - email: ${projectNumber + "-compute@developer.gserviceaccount.com"}
            scopes:
            - https://www.googleapis.com/auth/devstorage.read_only
            - https://www.googleapis.com/auth/logging.write
            - https://www.googleapis.com/auth/monitoring.write
            - https://www.googleapis.com/auth/servicecontrol
            - https://www.googleapis.com/auth/service.management.readonly
            - https://www.googleapis.com/auth/trace.append
  - log_wait_for_vm_network:
      call: sys.log
      args:
        data: ${"Waiting for VM network to initialize..."}
  - wait_for_vm_network:
      call: sys.sleep
      args:
          seconds: 120
  - get_instance:
      call: googleapis.compute.v1.instances.get
      args:
        instance: ${instanceName}
        project: ${projectId}
        zone: ${zone}
      result: instance
  - log_for_getted_instance:
      call: sys.log
      args:
        data: ${"instance_getted name is ->" + instance.name}
  
  - extract_external_ip_and_construct_urls:
      assign:
          - external_ip: ${instance.networkInterfaces[0].accessConfigs[0].natIP}
          - base_url: ${"http://" + external_ip + "/"}
  - start_work:
      call: http.get
      args:
          url: ${base_url}     
      result: final_result
  - log_delete_vm:
      call: sys.log
      args:
        data: ${"Deleting VM"}
  - delete_vm:
      call: googleapis.compute.v1.instances.delete
      args:
          instance: ${instanceName}
          project: ${projectId}
          zone: ${zone}
  - return_result:
      return: ${final_result.body}  
 
        
